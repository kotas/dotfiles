" Bundle ごとの設定

"# NERD_Commenter
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
" <Leader>xでコメントをトグル
map <Leader>x, c<space>
" 未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

"# vim-indent-guides
nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 4
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

"# Align
let g:Align_xstrlen = 3

"# YankRing
let g:yankring_history_dir = $HOME.'/.vim/'

"# Syntastic
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
" 自動的に開いたり閉じたりする
let g:syntastic_auto_loc_list=1

"# VTreeExplorer
let g:treeExplVertical=1
let g:treeExplWinSize=30
noremap <Leader>t<Space> :VSTreeExplore<CR>


"# neocomplcache

"補完ウィンドウの設定 :help completeopt
set completeopt=menuone
" 起動時に有効
let g:neocomplcache_enable_at_startup = 1
" ポップアップメニューで表示される候補の数。初期値は100
let g:neocomplcache_max_list = 20
" 自動補完を行う入力数を設定。初期値は2
let g:neocomplcache_auto_completion_start_length = 2
" 手動補完時に補完を行う入力数を制御。値を小さくすると文字の削除時に重くなる
let g:neocomplcache_manual_completion_start_length = 3
" バッファや辞書ファイル中で、補完の対象となるキーワードの最小長さ。初期値は4。
let g:neocomplcache_min_keyword_length = 4
" シンタックスファイル中で、補完の対象となるキーワードの最小長さ。初期値は4。
let g:neocomplcache_min_syntax_length = 4
" 1:補完候補検索時に大文字・小文字を無視する
let g:neocomplcache_enable_ignore_case = 1
" 入力に大文字が入力されている場合、大文字小文字の区別をする
let g:neocomplcache_enable_smart_case = 1
" 大文字小文字を区切りとしたあいまい検索を行うかどうか。
let g:neocomplcache_enable_camel_case_completion = 0
" アンダーバーを区切りとしたあいまい検索を行うかどうか。
let g:neocomplcache_enable_underbar_completion = 0
" 補完候補の一番先頭を選択状態にする
let g:neocomplcache_enable_at_startuple_auto_select = 1
" 文字を打ったら補完開始
let g:neocomplcache_enable_insert_char_pre = 1

" 補完するためのキーワードパターンを指定
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
" 日本語を補完候補として取得しないようにする
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" 関数を補完するための区切り文字パターン
if !exists('g:neocomplcache_delimiter_patterns')
  let g:neocomplcache_delimiter_patterns = {}
endif
let g:neocomplcache_delimiter_patterns['php'] = ['->', '::', '\']

" ディクショナリ補完
let g:neocomplcache_dictionary_filetype_lists = {
  \ 'default' : '',
  \ 'php' : $HOME . '/.vim/dict/php.dict',
  \ }

" オムニ補完
autocmd FileType python     setlocal omnifunc=pythoncomplete#Complete
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html       setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType css        setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType xml        setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType php        setlocal omnifunc=phpcomplete#CompletePHP
autocmd FileType c          setlocal omnifunc=ccomplete#Complete
autocmd FileType ruby       setlocal omnifunc=rubycomplete#Complete
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns['ruby'] = '[^. *\t]\.\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns['php'] = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns['c'] = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns['cpp'] = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

" TABで補完できるようにする
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" C-nでneocomplcache補完
inoremap <expr><C-n>  pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
" C-pでkeyword補完
inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
" 補完候補が出ていたら確定、なければ改行
inoremap <expr><CR>  pumvisible() ? neocomplcache#close_popup() : "<CR>"
" Insert モード中はカーソルキーで移動できるようにする情弱用設定
inoremap <expr><Left>  pumvisible() ? "\<Left>" : neocomplcache#close_popup() . "\<Left>"
inoremap <expr><Right> pumvisible() ? "\<Right>" :  neocomplcache#close_popup() . "\<Right>"
inoremap <expr><Up>    pumvisible() ? "\<Up>" : neocomplcache#close_popup() . "\<Up>"
inoremap <expr><Down>  pumvisible() ? "\<Down>" : neocomplcache#close_popup() . "\<Down>"

"# Unite

let g:unite_source_file_mru_limit = 200

nnoremap  [unite] <Nop>
nmap f [unite]
nnoremap [unite]u :<C-u>Unite -no-split<Space>

" 全部
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" いつもの
nnoremap <silent> [unite]f  :<C-u>UniteWithCurrentDir -no-split file buffer<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]r  :<C-u>Unite -no-split file_mru<CR>
" snippet一覧
nnoremap <silent> [unite]s  :<C-u>Unite snippet<CR>

" Unite ウィンドウの設定
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

  " すぐに絞り込めるように Insert モードにする
  let g:unite_enable_start_insert = 1

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}


